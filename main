import mysql.connector
class Tinder:

    def __init__(self):
        self.conn = mysql.connector.connect(host="localhost", user="root", password="", database="tinder")
        self.mycursor = self.conn.cursor()
        self.program_menu()





    def program_menu(self):


        program_input = input("""\n        Hi! Welcome to Tinder :
        1. Enter 1 to login.
        2. Enter 2 to register.
        3. Enter Anything else to exit : """)

        if program_input == '1':
            self.login()
        elif program_input == '2':
            self.register()
        else:
            print("\nThank You for using Tinder.... :)")

    def register(self):

        #   This is a function to register a new user and check for existing email ids

        print("\nWelcome to the registration page : \n")

        name = input("Enter Name : ")
        email = input("Enter email : ")
        password = input("Enter password : ")
        gender = input("Enter gender : ")
        age = int(input("Enter age : "))
        city = input("Enter city : ")

        self.mycursor.execute("""SELECT * FROM `users` WHERE `email` LIKE '{}'""".format(email))
        registered_emails = self.mycursor.fetchall()

        if len(registered_emails) > 0:
            print("\nSorry! This email id is already registered.\n")
            option = input("Type 'yes' to REGISTER again, type anything else to return to Home page.\n")

            if option == "yes":
                self.register()
            else:
                self.program_menu()

        else:
            self.mycursor.execute(
                """INSERT INTO `users` (`user_id`, `name`, `email`, `password`, `Gender`, `Age`, `City`) VALUES (NULL, '{}', '{}', '{}', '{}', '{}', '{}')""".format(
                    name, email, password, gender, age, city))
            self.conn.commit()

            print("Registration Successful")
            self.program_menu()

    def login(self):

        #   This is a function to login a particular user after checking for valid email and password

        email = input("Enter email : ")
        password = input("Enter password : ")

        self.mycursor.execute("""SELECT * FROM `users` WHERE `email` LIKE '{}'""".format(email))
        user_list_emails = self.mycursor.fetchall()

        if len(user_list_emails) == 0:
            print("\nThe given email id is not registered.\n")
            option = input("Type 'yes' to LOGIN again, type anything else to return to Home page.\n")

            if option == "yes":
                self.login()
            else:
                self.program_menu()

        else:
            self.mycursor.execute(
                """SELECT * FROM `users` WHERE `email` LIKE '{}' AND `password` LIKE '{}'""".format(email, password))
            user_list = self.mycursor.fetchall()

            if len(user_list) > 0:
                print("\n Hello", user_list[0][1], "! Welcome to Tinder :)\n")
                self.current_user_id = user_list[0][0]
                self.user_menu()
            else:
                print("\nWrong Password !!.\n")
                option = input("Type 'yes' to LOGIN again, type anything else to return to Home page.\n")

                if option == "yes":
                    self.login()
                else:
                    self.program_menu()

    def user_menu(self):

        #   This function provides the menu to an user after he/she has logged in.

        user_input = input("""\n        Hi!, How would you like to proceed?
        1. View all users.
        2. View who proposed you.
        3. View your proposals or cancel a proposal.
        4. View your matches.
        5. Anything else to logout.
        """)

        if user_input == '1':
            self.view_all_users()
        elif user_input == '2':
            self.view_proposed()
        elif user_input == '3':
            self.view_proposals()
        elif user_input == '4':
            self.view_matches()
        else:
            self.logout()

    def view_all_users(self):

        #   This function provides the current user with nrequired details of all other users and the option to propose someone

        self.mycursor.execute("""SELECT * FROM `users` WHERE `user_id` NOT LIKE '{}'""".format(self.current_user_id))
        all_users = self.mycursor.fetchall()

        print(
            "\tUSER ID  \t|\tNAME  \t \t|\tGENDER  \t\t|\tAGE  \t|\tCITY\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")

        for i in all_users:
            print("\t", i[0], "\t|\t", i[1], "\t|\t", i[4], "\t\t|\t", i[5], "\t|\t", i[6], "\n",
                  "-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")

        option = input("\nEnter 'yes' to propose someone or anything else to return to menu : ")

        if option == "yes":
            self.juliet_id = int(input("\nEnter the id of the User whom you want to propose : "))
            self.propose(self.juliet_id)
        else:
            self.user_menu()

    def propose(self, juliet_id):

        #   This function allows the user to propose another user

        self.mycursor.execute("""SELECT * FROM `users` WHERE `user_id` = '{}'""".format(juliet_id))
        registered = self.mycursor.fetchall()

        if len(registered) == 0:
            print("\nSorry ! This user is not registered :(")
            option = input("\nType 'yes' to VIEW ALL USERS again, type anything else to return to your menu.\n")

            if option == "yes":
                self.view_all_users()
            else:
                self.user_menu()

        else:
            self.mycursor.execute(
                """SELECT * FROM `proposals` WHERE `romeo_id` LIKE '{}' AND `juliet_id` LIKE'{}'""".format(
                    self.current_user_id, juliet_id))
            already_proposed = self.mycursor.fetchall()

            if len(already_proposed) == 0:
                self.mycursor.execute(
                    """INSERT INTO `proposals` (`proposals_id`, `romeo_id`, `juliet_id`) VALUES (NULL, '{}', '{}')""".format(
                        self.current_user_id, juliet_id))
                self.conn.commit()

                print("\nProposal Successful... Fingers Crossed  !!\n")
                self.user_menu()

            else:
                print("\nSorry, You cannot propose the same person twice. :(\n")
                option = input("Type 'yes' to VIEW ALL USERS again, type anything else to return to your menu.\n")

                if option == "yes":
                    self.view_all_users()
                else:
                    self.user_menu()

    def view_proposed(self):

        #   This function allows the user to view all the users who proposed him/her.

        self.mycursor.execute(
            """SELECT * FROM `proposals` p JOIN `users` u ON u.`user_id`=p.`romeo_id` WHERE p.`juliet_id`= '{}' """.format(
                self.current_user_id))
        who_proposed = self.mycursor.fetchall()

        if len(who_proposed) > 0:

            print(
                "NAME  \t \t|\tEMAIL ID  \t|\tGENDER  \t\t|\tAGE  \t|\tCITY\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")

            for i in who_proposed:
                print(i[4], "\t|\t", i[5], "\t|\t", i[7], "\t\t|\t", i[8], "\t|\t", i[9], "\n",
                      "-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")

        else:
            print("\nSorry ! No one proposed you yet.\nRedirecting you to your menu....")

        self.user_menu()

    def view_proposals(self):

        #   This function aloows the user to view all the users whom he/she proposed and the opyion to cancel a proposal

        self.mycursor.execute(
            """SELECT * FROM `proposals` p JOIN `users` u ON u.`user_id`=p.`juliet_id` WHERE p.`romeo_id`= '{}' """.format(
                self.current_user_id))
        who_i_proposed = self.mycursor.fetchall()

        if len(who_i_proposed) > 0:

            print(
                "\tUSER ID  \t|\tNAME  \t \t|\tEMAIL ID  \t|\tGENDER  \t\t|\tAGE  \t|\tCITY\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")

            for i in who_i_proposed:
                print("\t", i[3], "\t|\t", i[4], "\t|\t", i[5], "\t|\t", i[7], "\t\t|\t", i[8], "\t|\t", i[9], "\n",
                      "-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")

        else:
            print("\nSorry ! You haven't proposed anyone yet.")

        option = input("""\n        1. Propose someone.
        2. Cancel a Proposal.
        3. Anything else to return to menu.
        """)
        if option == '1':
            self.view_all_users()
        elif option == '2':
            delete_proposal = input("Enter the id of the proposed person : ")
            self.cancel_proposal(delete_proposal)
        else:
            self.user_menu()

    def cancel_proposal(self, cancellation_id):

        #   This function allows the user to cancel a proposal.

        self.mycursor.execute(
            """SELECT * FROM `proposals` WHERE `romeo_id` = '{}' AND `juliet_id` = '{}'""".format(self.current_user_id,
                                                                                                  cancellation_id))
        no_proposals = self.mycursor.fetchall()

        if len(no_proposals) > 0:
            self.mycursor.execute(
                """DELETE FROM `proposals` WHERE `proposals`.`romeo_id` = '{}' AND `proposals`.`juliet_id` = '{}'""".format(
                    self.current_user_id, cancellation_id))
            print("\nCancellation Successful.")
        else:
            print("\nYou have not proposed this person yet !!")

        option = input("\nType 'yes' to VIEW PROPOSALS again, type anything else to return to your menu.\n")

        if option == "yes":
            self.view_proposals()
        else:
            self.user_menu()

    def view_matches(self):

        # This function allows the user to view all other users with whom he/she is matched.

        self.mycursor.execute("""SELECT * FROM `proposals` p
                                             JOIN `users` u
                                             ON u.`user_id`=p.`juliet_id`
                                             WHERE p.`juliet_id`
                                             IN (SELECT `romeo_id` FROM `proposals` WHERE `juliet_id` LIKE '{}')
                                             AND p.`romeo_id` LIKE '{}'""".format(self.current_user_id,
                                                                                  self.current_user_id))
        matched = self.mycursor.fetchall()

        if len(matched) > 0:
            print(
                "NAME  \t \t|\tEMAIL ID  \t|\tGENDER  \t\t|\tAGE  \t|\tCITY\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
            for i in matched:
                print(i[4], "\t|\t", i[5], "\t|\t", i[7], "\t\t|\t", i[8], "\t|\t", i[9], "\n",
                      "-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")

        else:
            print("Sorry! No one is matched with you yet.... But don't lose hope :)")

        self.user_menu()

    def logout(self):

        #   This is a function to logout and return to the Home page

        self.current_user_id = 0
        option = input(
            "\nDo you really want to logout and return to login page? \nEnter 'yes' to logout , anything else to stay on this page : ")

        if option == "yes":
            print("\nYou are successfully Logged Out...\nRedirecting you to Home Page now....")
            self.program_menu()
        else:
            self.user_menu()


obj1 = Tinder()
